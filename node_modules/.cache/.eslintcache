[{"/Users/ramsddc1/Documents/Projects/Circuit/Toni_Example/src/index.js":"1","/Users/ramsddc1/Documents/Projects/Circuit/Toni_Example/src/containers/Location.js":"2"},{"size":429,"mtime":1630510887792,"results":"3","hashOfConfig":"4"},{"size":3390,"mtime":1630509674359,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"18etsxm",{"filePath":"9","messages":"10","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/ramsddc1/Documents/Projects/Circuit/Toni_Example/src/index.js",["12"],"import ReactDOM from 'react-dom';\nimport './index.css';\nimport React, { Component } from 'react';\nimport Location from './containers/Location';\n\n\nclass Index extends Component {\n\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div>\n        {<Location />}\n      </div>\n    );\n\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Index />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","/Users/ramsddc1/Documents/Projects/Circuit/Toni_Example/src/containers/Location.js",["13","14","15"],"import * as THREE from \"three\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport map from './textures/earth.jpg';\n\nexport default class Location extends Component {\n  constructor(props) {\n    super(props);\n    this.scene = new THREE.Scene();\n\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n\n    document.body.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.001,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 5);\n    this.time = 0;\n\n    this.isPlaying = true;\n\n    //rotate scene\n    this.mouseDown = false;\n    this.mouseX = 0;\n    this.mouseY = 0;\n    // end rotate the scene\n\n    this.addObjects();\n    this.resize();\n    this.addMouseHandler();\n    this.renderScene();\n    this.setupResize();\n  }\n\n  //rotate the scene \n\n\n  onMouseMove(e) {\n    if (!this.mouseDown) {\n      return;\n    }\n\n    e.preventDefault();\n\n    this.deltaX = e.clientX - this.mouseX;\n    this.deltaY = e.clientY - this.mouseY;\n    this.mouseX = e.clientX;\n    this.mouseY = e.clientY;\n    this.rotateScene(this.deltaX, this.deltaY);\n  }\n\n  onMouseDown(e) {\n    e.preventDefault();\n\n    this.mouseDown = true;\n    this.mouseX = e.clientX;\n    this.mouseY = e.clientY;\n  }\n\n  onMouseUp(e) {\n    e.preventDefault();\n\n    this.mouseDown = false;\n  }\n\n  addMouseHandler() {\n    window.addEventListener('mousemove', (e) => {\n      this.onMouseMove(e);\n    }, false);\n    window.addEventListener('mousedown', (e) => {\n      this.onMouseDown(e);\n    }, false);\n    window.addEventListener('mouseup', (e) => {\n      this.onMouseUp(e);\n    }, false);\n  }\n\n\n  rotateScene(deltaX, deltaY) {\n    this.mesh.rotation.y += deltaX / 100;\n    this.mesh.rotation.x += deltaY / 100;\n  }\n\n\n\n  //end rotate the scene\n\n  settings() {\n    let that = this;\n    this.settings = {\n      progress: 0,\n    };\n  }\n\n  setupResize() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    this.camera.updateProjectionMatrix();\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.MeshPhongMaterial();\n    //this.material.color = new THREE.Color(\"rgb(200, 0,0)\");\n    this.material.map = new THREE.TextureLoader().load(map);\n    this.geometry = new THREE.SphereGeometry(2, 45, 45);\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    this.light = new THREE.AmbientLight(0xffffed);\n    this.scene.add(this.mesh);\n    this.scene.add(this.light);\n  }\n\n  stop() {\n    this.isPlaying = false;\n  }\n\n  play() {\n    if (!this.isPlaying) {\n      this.renderScene()\n      this.isPlaying = true;\n    }\n  }\n\n  renderScene() {\n    if (!this.isPlaying) return;\n    requestAnimationFrame(this.renderScene.bind(this));\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n\n    return (\n      <div>\n        <script src=\"Location.js\"></script>\n      </div>\n    );\n\n  }\n\n}\n\n\n\n\n\n",{"ruleId":"16","severity":1,"message":"17","line":10,"column":3,"nodeType":"18","messageId":"19","endLine":12,"endColumn":4},{"ruleId":"20","severity":1,"message":"21","line":3,"column":8,"nodeType":"22","messageId":"23","endLine":3,"endColumn":16},{"ruleId":"20","severity":1,"message":"24","line":100,"column":9,"nodeType":"22","messageId":"23","endLine":100,"endColumn":13},{"ruleId":"20","severity":1,"message":"24","line":119,"column":9,"nodeType":"22","messageId":"23","endLine":119,"endColumn":13},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'that' is assigned a value but never used."]